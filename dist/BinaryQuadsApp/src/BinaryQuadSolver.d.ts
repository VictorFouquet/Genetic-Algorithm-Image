import { Canvas } from "canvas";
import { NodeCanvasHandler } from "../../Canvas/NodeCanvasHandler";
import { CyclicQuad } from "../../Geometry";
import { BinaryQuadsIndividual } from "./BinaryQuadsIndividual";
import { BinaryQuadPopulation } from "./BinaryQuadsPopulation";
/** Binary quad solver main class */
export declare class BinaryQuadSolver {
    populationSize: number;
    maxGeneration: number;
    mutationRate: number;
    refCanvasWidth: number;
    refCanvasHeight: number;
    quadsCount: number;
    refImageQuads: CyclicQuad[];
    refCanvas: Canvas;
    refHandler: NodeCanvasHandler;
    outputFolder: string;
    /**
     * Initializes population and creates reference image.
     * @param popSize population size
     * @param maxGen max number of generation to evolve
     * @param mutRate population's mutation rate
     * @param quadCount number of quads in reference image
     * @param canvasWidth reference image width
     * @param canvasHeight reference image height
     * @param out output folder to write images
     */
    constructor(popSize: number, maxGen: number, mutRate: number, quadsCount: number, canvasWidth: number, canvasHeight: number, out: string);
    /** Creates the random image of black quads on white background */
    createRefCanvas(): void;
    /**
     * Converts a number of mismatching pixels to a similarity percentage.
     * @param fitness number of mismatching pixels
     * @returns percentage of similarity between a generated image and ref image
     */
    fitnessToPercentage(fitness: number): number;
    /**
     * Creates then saves statistic graph into file system.
     * @param bestFitnesses fitnesses of the population
     * @param population population that evolved
     * @param elapsedTime total elapsed time between spawning and problem solving
     * @param refSize reference image's size
     */
    saveStats(bestFitnesses: number[], population: BinaryQuadPopulation, elapsedTime: number, refSize: number): void;
    /**
     * Writes the image generated by the best individual phenotype
     * @param best best individual
     * @param gen current generation
     */
    saveBest(best: BinaryQuadsIndividual, gen: number): void;
    /** Binary quads solver main function */
    solve(): void;
}
